package medium

import Solution
import java.util.*

class Solution200 : Solution() {
    override fun test() {
        val input = arrayOf(
            arrayOf(charArrayOf('1','1','1','1','0'), charArrayOf('1','1','0','1','0'), charArrayOf('1','1','0','0','0'), charArrayOf('0','0','0','0','0')),
            arrayOf(charArrayOf('1','1','0','0','0'), charArrayOf('1','1','0','0','0'), charArrayOf('0','0','1','0','0'), charArrayOf('0','0','0','1','1')),
            arrayOf(charArrayOf('1', '1', '1', '1', '1', '0', '1', '1', '1', '1', '1', '1', '1', '1', '1', '0', '1', '0', '1', '1'), charArrayOf('0', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '0', '1', '1', '1', '1', '1', '0'), charArrayOf('1', '0', '1', '1', '1', '0', '0', '1', '1', '0', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1'), charArrayOf('1', '1', '1', '1', '0', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1'), charArrayOf('1', '0', '0', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1'), charArrayOf('1', '0', '1', '1', '1', '1', '1', '1', '0', '1', '1', '1', '0', '1', '1', '1', '0', '1', '1', '1'), charArrayOf('0', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '0', '1', '1', '0', '1', '1', '1', '1'), charArrayOf('1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '0', '1', '1', '1', '1', '0', '1', '1'), charArrayOf('1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '0', '1', '1', '1', '1', '1', '1', '1', '1', '1'), charArrayOf('1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1'), charArrayOf('0', '1', '1', '1', '1', '1', '1', '1', '0', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1'), charArrayOf('1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1'), charArrayOf('1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1'), charArrayOf('1', '1', '1', '1', '1', '0', '1', '1', '1', '1', '1', '1', '1', '0', '1', '1', '1', '1', '1', '1'), charArrayOf('1', '0', '1', '1', '1', '1', '1', '0', '1', '1', '1', '0', '1', '1', '1', '1', '0', '1', '1', '1'), charArrayOf('1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '0', '1', '1', '1', '1', '1', '1', '0'), charArrayOf('1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '0', '1', '1', '1', '1', '0', '0'), charArrayOf('1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1'), charArrayOf('1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1'), charArrayOf('1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1'))
        )
        input.forEach { println(numIslands(it)) }
    }

    fun numIslands(grid: Array<CharArray>): Int {
        var result = 0
        grid.forEachIndexed { i, row ->
            row.forEachIndexed { j, cell ->
                if (cell == '1') {
                    helper(i, j, grid)
                    result++
                }
            }
        }
        return result
    }

    fun helper(x: Int, y: Int, grid: Array<CharArray>) {
        val queue = LinkedList<Pair<Int, Int>>()
        queue.add(Pair(x, y))
        grid[x][y] = '0'
        while (queue.isNotEmpty()) {
            val (a, b) = queue.poll()
            if (a < grid.size - 1 && grid[a + 1][b] == '1') {
                queue.add(Pair(a + 1, b))
                grid[a + 1][b] = '0'
            }
            if (a > 0 && grid[a - 1][b] == '1') {
                queue.add(Pair(a - 1, b))
                grid[a - 1][b] = '0'
            }
            if (b < grid.first().size - 1 && grid[a][b + 1] == '1') {
                queue.add(Pair(a, b + 1))
                grid[a][b + 1] = '0'
            }
            if (b > 0 && grid[a][b - 1] == '1') {
                queue.add(Pair(a, b - 1))
                grid[a][b - 1] = '0'
            }
        }
    }
}